generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                      String      @id @default(uuid())
  email                   String      @unique(map: "User_email_key")
  name                    String
  lastname                String?
  role                    user_role   @default(ADOPTER)
  password                String
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  documentPath            String?
  password_reset_token    String?
  password_reset_experies DateTime?
  status                  user_status
  adopter                 adopter?
  ong                     ong?
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model adopter {
  id              String            @id @default(uuid())
  document        String
  phone           String
  address         String
  zipcode         String
  state           String
  city            String
  userId          String            @unique(map: "Adopter_userId_key")
  user            user              @relation(fields: [userId], references: [id], map: "Adopter_userId_fkey")
  adoptionRequest AdoptionRequest[]
  chats           Chat[]
  createdAt       DateTime          @default(now())
}

model ong {
  id      String    @id @default(uuid())
  cnpj    String
  phone   String
  address String
  zipcode String
  state   String
  city    String
  userId  String    @unique(map: "Ong_userId_key")
  name    String
  slug    String
  article article[]
  events  event[]
  pets    Pet[]
  user    user      @relation(fields: [userId], references: [id], map: "Ong_userId_fkey")
  chats           Chat[]
  createdAt       DateTime          @default(now())
}

model article {
  id        String    @id @default(uuid())
  title     String
  categorie String
  thumbnail String
  banner    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  ongId     String
  slug      String
  ong       ong       @relation(fields: [ongId], references: [id], map: "Article_ongId_fkey")
  section   section[]

  @@index([ongId], map: "Article_ongId_fkey")
}

model section {
  id        String  @id @default(uuid())
  articleId String
  title     String
  content   String  @db.Text
  quote     String?
  image     String?
  position  Int     @default(0)
  article   article @relation(fields: [articleId], references: [id], onDelete: Cascade, map: "Section_articleId_fkey")

  @@index([articleId], map: "Section_articleId_fkey")
}

model event {
  id             String   @id @default(uuid())
  title          String
  slug           String
  categorie      String
  time           String
  location       String
  address        String
  city           String
  state          String
  description    String @db.Text
  additionalInfo String
  imageUrl       String
  date           DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ongId          String
  ong            ong      @relation(fields: [ongId], references: [id], onDelete: Cascade)
}

model Pet {
  id              String            @id @default(uuid())
  name            String
  species         String
  breed           String
  color           String
  size            String
  health          String
  temperament     String
  birthdate       DateTime
  status          Boolean           @default(true) // true for available, false for unavailable
  history         String            @db.Text
  slug            String            @unique
  ongId           String
  ong             ong               @relation(fields: [ongId], references: [id], onDelete: Cascade)
  images          PetImage[]        @relation("PetImages")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AdoptionRequest AdoptionRequest[]

  @@map("pets") // Nome da tabela no banco de dados
}

model PetImage {
  id        String   @id @default(uuid())
  url       String
  petId     String
  pet       Pet      @relation("PetImages", fields: [petId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("images") // Nome da tabela no banco de dados
}

model AdoptionRequest {
  id                String        @id @default(uuid())
  petId             String        
  pet               Pet           @relation(fields: [petId], references: [id])
  adopterId         String        
  adopter           adopter       @relation(fields: [adopterId], references: [id])
  status            String        @default("PENDING") // PENDING, APPROVED, REJECTED
  name              String
  lastname          String
  email             String
  phone             String
  cpf               String        
  maritalStatus     MaritalStatus
  address           String
  city              String
  state             String
  zipCode           String
  residenceType     ResidenceType
  hasOtherPets      Boolean
  reasonForAdoption String
  proofOfResidence  String // URL para comprovante (PDF/imagem)

  createdAt DateTime @default(now())

  @@map("adoption_requests")
}

model Chat {
  id           String     @id @default(uuid())
  adopterId    String?
  ongId        String?
  messages     Message[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  adopter      adopter?   @relation(fields: [adopterId], references: [id])
  ong          ong?       @relation(fields: [ongId], references: [id])
}


model Message {
  id          String   @id @default(uuid())
  subject     String
  body        String
  senderId    String
  receiverId  String
  createdAt   DateTime @default(now())

  sender      user     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    user     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId      String
}


enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum ResidenceType {
  HOUSE
  APARTMENT
  OTHER
}

enum user_role {
  ADMIN
  ADOPTER
  ONG
}

enum user_status {
  ACTIVE
  INATIVE
  PENDING
}
